// STEPS FOR HOMEWORK 

// EACH CLASS WILL HAVE THE FOLLOWING PROPERTIES AND METHODS:
// 1. Name
// 2. ID
// 3. Email
// 4. getName() method
// 5. getId() method
// 6. getEmail() method
// 7. getRole() method (returns role)

// MANAGER CLASS EXTENDS EMPLOYEE AND WILL ALSO NEED:
// 1. officeNumber
// 2. getRole() method (returns role(Manager) and overrides Employee)

// ENGINEER CLASS EXTENDS EMPLOYEE AND WILL ALSO NEED:
// 1. GitHub username
// 2. getGithub() method
// 3. getRole() method (returns role(Engineer) and overrides Employee)

// INTERN CLASS EXTENDS EMPLOYEE AND WILL ALSO NEED:
// 1. School
// 2. getSchool() method
// 3. getRole() method (returns role(Intern) and overrides Employee)

// CREATE A WALKTHROUGH VIDEO THAT INCLUDES:
// Demonstrates functionality
// Shows all 4 tests pass from the command line
// How the user invokes the application from the command line (node index.js)
// How the user enters responses to all the prompts 
// Shows the generated HTML file that matches user input

// MUST SUBMIT:
// 1. Link to walkthrough video
// 2. Github repository url
// 3. Sample HTML file generated by application


const fs = require('fs');
const inquirer = require('inquirer');
const util = require('util');
const writeFileAsync = util.promisify(fs.writeFile);

const Manager = require('./Lib/Manager');
const Engineer = require('./Lib/Engineer');
const Intern = require('./Lib/Intern');
const generateHTML = require('./src/generateHTML')
const { employeeQuestions, managerQuestions, internQuestions, engineerQuestions, newEmployee, } = require('./src/employeeQuestions')

const managerArr = [];
const engineerArr = [];
const internArr = [];


const buildTeam = async () => {
  let employee = await inquirer.prompt(employeeQuestions);

  try {

    switch (employee.role) {

      case 'Manager':
        let officeName = await inquirer.prompt(managerQuestions);
        const manager = new Manager(
          employee.name,
          employee.id,
          employee.email,
          officeName.officeNumber
        );
        managerArr.push(manager);
        break;

      case 'Engineer':
        let gitHubName = await inquirer.prompt(engineerQuestions);
        const engineer = new Engineer(
          employee.name,
          employee.id,
          employee.email,
          gitHubName.github
        );
        engineerArr.push(engineer);
        break;

      case 'Intern':
        let schoolName = await inquirer.prompt(internQuestions);
        const intern = new Intern(
          employee.name,
          employee.id,
          employee.email,
          schoolName.school
        );
        internArr.push(intern);
        break;
      default: "";
    }
  } 
  catch (error) {
    console.log(error);
  }
};

const newEmployees = async () => {
  let addNewEmployee = 'Yes';
  let addNewEmployees;
  while(newEmployee === 'Yes'){
    addNewEmployee = await inquirer.prompt(newEmployee);
    addNewEmployee = await addNewEmployees.newEmployee;

    if (addNewEmployee === 'Yes') {
      await buildTeam();
    }
  }
};

const init = async () => {
  try {
    await buildTeam();
    await newEmployees();
    await writeFileAsync('index.html', generateHTML(managerArr, internArr, engineerArr));
      console.log('An index.html file was successfully created with your input!');
  }
  catch(err) {
    console.error(err);
  } 
};

init();